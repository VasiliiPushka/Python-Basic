import telebot
import json

from peewee import IntegrityError
from telebot.types import Message
from telebot import custom_filters
from telebot.storage import StateMemoryStorage
from telebot.util import split_string

import api
from config import BOT_TOKEN, API_KEY, API_BASE_URL
from states import States
from models import User

state_storage = StateMemoryStorage()
bot = telebot.TeleBot(BOT_TOKEN, state_storage=state_storage)


@bot.message_handler(commands=["start"])
def start(message: Message) -> None:

    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    try:
        User.create(
            user_id = user_id,
            username = username,
            first_name = first_name,
            last_name = last_name,
        )

        bot.send_message(
            message.chat.id, f"–ü—Ä–∏–≤–µ—Ç {first_name}! "
                             f"–Ø —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ API –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞")
        bot.set_state(message.from_user.id, States.id, message.chat.id)

    except IntegrityError:
        bot.reply_to(message, f"–†–∞–¥ —Å–Ω–æ–≤–∞ –í–∞—Å –≤–∏–¥–µ—Ç—å {first_name}")


@bot.message_handler(commands=["movie_search_id"])
def movie_search_id_command(message: Message) -> None:
    bot.send_message(message.chat.id, f"–£–∫–∞–∂–∏—Ç–µ id –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 250 –¥–æ 10000000!")
    bot.set_state(message.from_user.id, States.id, message.chat.id)


@bot.message_handler(commands=["movie_search"])
def movie_search_command(message: Message) -> None:
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ ")
    bot.set_state(message.from_user.id, States.name, message.chat.id)


@bot.message_handler(state=States.id)
def movie_search(message: Message) -> None:

    if not message.text.isdigit():
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID")
        return

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        result = api.movie_search_id(movie_id=message.text)

        if result is None:
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")

        if not result:
            bot.send_message(message.chat.id, "–§–∏–ª—å–º —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")

        try:
            json_raw = json.dumps(result, ensure_ascii=False, indent=2)
            message_parts = split_string(json_raw, 3000)  # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤

            for part in message_parts:
                bot.send_message(
                    message.chat.id,
                    f"<pre>{part}</pre>",
                    parse_mode="HTML"
                )
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

        # try:
        #     movie_id = result.get('docs', [])
        #     response_text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: \n\n"
        #
        #     for movie in movie_id:
        #         name = movie.get('name', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')
        #         year = movie.get('year', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        #         year =  movie.get('year', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        #         rating = movie.get('rating', {}).get('kp', '–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞')
        #         description = movie.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:500]  # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω
        #         backdrop = movie.get('backdrop', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç–µ—Ä')
        #
        #         response_text += (
        #             f"üé¨ <b>{name}</b> ({year})\n"
        #             f" <b>{backdrop}</b\n"
        #             f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: <b>{rating}</b>\n"
        #             f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: <i>{description}...</i>\n\n"
        #         )
        #
        #
        #     bot.send_message(
        #         message.chat.id,
        #         response_text,
        #         parse_mode="HTML"
        #     )

        # try:
        #     json_raw = json.dumps(result, ensure_ascii=False, indent=2)
        #     bot.send_message(message.chat.id, f"<pre>{json_raw}</pre>", parse_mode="HTML")
        # except Exception as e:
        #     bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")



@bot.message_handler(state=States.name)
def movie_search(message: Message) -> None:

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∞
    if not message.text.strip():  # –µ—Å–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –ø—Ä–æ–±–µ–ª—ã
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞")
        return

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        result = api.movie_search(query=message.text, page=1, limit=10)

        if result is None:
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")

        if not result:
            bot.send_message(message.chat.id, "–§–∏–ª—å–º —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")

        try:
            movies = result.get('docs', [])
            response_text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: \n\n"

            for movie in movies:
                name = movie.get('name', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')
                year = movie.get('year', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                rating = movie.get('rating', {}).get('kp', '–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞')
                description = movie.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:300]  # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ

                response_text += (
                    f"üé¨ <b>{name}</b> ({year})\n"
                    f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: <b>{rating}</b>\n"
                    f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: <i>{description}...</i>\n\n"
                )

            bot.send_message(
                message.chat.id,
                response_text,
                parse_mode="HTML"
            )

        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")


if __name__ == "__main__":
    bot.add_custom_filter(custom_filters.StateFilter(bot))
    bot.set_my_commands(
        [
            telebot.types.BotCommand("movie_search_id", "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ id"),
            telebot.types.BotCommand("movie_search", "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
        ]
    )
    bot.polling()