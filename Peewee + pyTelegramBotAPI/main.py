import telebot
import json

from telebot.types import Message
from telebot import custom_filters
from telebot.storage import StateMemoryStorage

from api.api import print_info, movie_search, movie_search_id, filter_list
from Telegramm_bot.database.crud import get_or_create_user
from config.config import BOT_TOKEN
from states.states import States, MovieStates
from db.crud import *


state_storage = StateMemoryStorage()
bot = telebot.TeleBot(BOT_TOKEN, state_storage=state_storage)

@bot.message_handler(commands=["start"])
def start(message: Message) -> None:

    user_id = message.from_user.id or ''
    username = message.from_user.username or ''
    first_name = message.from_user.first_name or ''
    last_name = message.from_user.last_name or ''

    user, created = get_or_create_user(user_id, username, first_name, last_name)

    if created:
        bot.send_message(message.from_user.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Ñ–∏–ª—å–º–æ–≤, {username}!")
    else:
        bot.send_message(message.from_user.id, f"–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å, {username}!")


@bot.message_handler(commands=["movie_search_id"])
def movie_search_id_command(message: Message) -> None:
    bot.send_message(message.chat.id, f"–£–∫–∞–∂–∏—Ç–µ id –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 250 –¥–æ 10000000!")
    bot.set_state(message.from_user.id, States.id, message.chat.id)


@bot.message_handler(state=States.id)
def movie_search_id(message: Message) -> None:

    if not message.text.isdigit():
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID")
        return

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        result = movie_search_id(message.text)

        if result is None:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")

        if not result:
            bot.send_message(message.chat.id, f"–§–∏–ª—å–º —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω")

        try:
            movie_id_info = result.get('docs')
            print(json.dumps(movie_id_info, ensure_ascii=False, indent=4))

            for info in movie_id_info:
                name = info.get('name')
                description = info.get('description')
                rating = info.get('rating')
                year = info.get('year')
                genres = info.get('genres')
                age_rating = info.get('ageRating')
                poster = info.get('poster')

                response_text = (
                    f"<b>{name}</b>\n"
                    f"<b>–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {year}</b>\n"
                    f"<b>–†–µ–π—Ç–∏–Ω–≥</b>\n"
                    f"  ‚Ä¢ –ö–∏–Ω–æ–ü–æ–∏—Å–∫: {rating.get('kp', 'N/A')}\n"
                    f"  ‚Ä¢ IMDB: {rating.get('imdb', 'N/A')}\n"
                    f"<b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {age_rating}+\n"
                    f"<b>–ñ–∞–Ω—Ä:</b> {genres}\n"
                    f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}"
                    )

                if poster and poster.get('url'):
                    bot.send_photo(
                        message.chat.id,
                        poster['url'],
                        caption=response_text,
                        parse_mode='HTML'
                    )
                else:
                    bot.send_message(
                        message.chat.id,
                        response_text,
                        parse_mode='HTML'
                    )

        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")


@bot.message_handler(commands=["movie_search"])
@bot.message_handler(state=States.name)
def ask_movie_query(message: Message) -> None:
    bot.send_message(message.chat.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ üé¨")
    bot.set_state(message.from_user.id, MovieStates.query, message.chat.id)


@bot.message_handler(state=MovieStates.query)
def ask_movie_page(message: Message) -> None:
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['query'] = message.text

    bot.send_message(message.chat.id, f"–£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∫–∏ —Ñ–∏–ª—å–º–∞")
    bot.set_state(message.from_user.id, MovieStates.page, message.chat.id)


@bot.message_handler(state=MovieStates.page)
def ask_movie_limit(message: Message) -> None:
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['page'] = message.text

    bot.send_message(message.chat.id, f"–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º —Ä–∞–Ω–µ–µ "
                                      f"–Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω")
    bot.set_state(message.from_user.id, MovieStates.limit, message.chat.id)


@bot.message_handler(state=MovieStates.limit)
def ask_movie_search(message: Message) -> None:
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        try:
            query = data['query']
            page = data['page']
            limit = message.text

            print_info(query=query, page=page, limit=limit)

            result = movie_search(page=int(page), limit=int(limit), query=query)
            movies = result.get('docs', [])

            for movie_data in movies:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                api_id = str(movie_data.get('id'))
                title = movie_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                description = movie_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                rating = movie_data.get('rating', {})
                rating_kp = float(rating.get('kp', 0))
                rating_imdb = float(rating.get('imdb', 0))
                year = str(movie_data.get('year', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
                age_rating = str(movie_data.get('ageRating', 0))
                budget = str(movie_data.get('budget', {}).get('value', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
                poster_url = movie_data.get('poster', {}).get('url')
                is_series = bool(movie_data.get('isSeries', False))

                movie, created = create_or_get_movie(
                    api_id=api_id,
                    title=title,
                    description=description,
                    rating_kp=rating_kp,
                    rating_imdb=rating_imdb,
                    year=year,
                    age_rating=age_rating,
                    budget=budget,
                    poster_url=poster_url,
                    is_series=is_series
                )

                filter_genres = [genre.get('name') for genre in movie_data.get('genres', [])]

                movie_text = (
                    f"üé¨ <b>{title}</b>\n"
                    f"   <b>–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {year}</b>\n"
                    f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥</b>\n"
                    f"  ‚Ä¢ –ö–∏–Ω–æ–ü–æ–∏—Å–∫: {rating.get('kp', 'N/A')}\n"
                    f"  ‚Ä¢ IMDB: {rating.get('imdb', 'N/A')}\n"
                    f"<b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {age_rating}+\n"
                    f"<b>–ñ–∞–Ω—Ä:</b> {filter_list(filter_genres)}\n"
                    f"üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}"
                    )

                if poster_url:
                    bot.send_photo(message.chat.id, poster_url, caption=movie_text,
                        parse_mode='HTML')
                else:
                    bot.send_message(
                        message.chat.id,
                        movie_text,
                        parse_mode='HTML'
                        )

                bot.delete_state(message.from_user.id, message.chat.id)

        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
            bot.delete_state(message.from_user.id, message.chat.id)


if __name__ == "__main__":
    bot.add_custom_filter(custom_filters.StateFilter(bot))
    bot.set_my_commands(
        [
            telebot.types.BotCommand("movie_search_id", "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ id"),
            telebot.types.BotCommand("movie_search", "–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"),
            telebot.types.BotCommand("start", "–ù–∞–∂–º–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        ]
    )
    bot.polling()